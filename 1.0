from moralis import evm_api # this is what I am using to generate my api key @ https://admin.moralis.io/
import requests
from decimal import Decimal
import cryptocompare
import pygsheets
from web3 import Web3

api_key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJub25jZSI6ImJhM2E0MzgzLTc3NDYtNDRiMC1iMzM3LWI2ZDFiYzFjMGU4NyIsIm9yZ0lkIjoiMzQ1NjUzIiwidXNlcklkIjoiMzU1MzE2IiwidHlwZSI6IlBST0pFQ1QiLCJ0eXBlSWQiOiJiNmUzNjQ2Ny1iMTVhLTQyZjAtYWU1Ny0xYzY4ZDNkMDdlYmEiLCJpYXQiOjE2ODgwOTk1NjUsImV4cCI6NDg0Mzg1OTU2NX0.fhpSrYTpSXyvTWIYG--Mqs5ac-mjr6TZGpVB9suYBJs"
wallet_address = '0xA12dCA97991575fFBEC9F75943c4A4B034d30f39'
 




params = {
    "chain": "arbitrum", # access the arbitrum network
    "address": wallet_address # !!wallet!!
}
result = evm_api.token.get_wallet_token_balances(api_key=api_key, params=params) # fetches token balances
response = requests.get("https://api.exchangerate-api.com/v4/latest/USD") # gets the exchange rate 
exchange_rates = response.json()["rates"]

sorted_balances = sorted(result, key=lambda balance: int(balance['balance']) * exchange_rates.get(balance['symbol'], 0), reverse=True) # this cleans up the information 

for balance in sorted_balances:  # starts a loop to iterate over each balance in the wallet
    name = balance['name']
    symbol = balance['symbol']
    balance_value = Decimal(str(balance['balance'][:5]))

    

    token_price_data = cryptocompare.get_price(symbol, currency='USD')
    if token_price_data and symbol in token_price_data:
        token_price = token_price_data[symbol]['USD']
        eth_price_decimal = Decimal(str(token_price))
        usd_price = eth_price_decimal * balance_value
        #print(f"Token: {name}, Symbol: {symbol}, Quantity: {balance_value}, Balance (ETH): N/A, Balance (USD): {usd_price}")
    else:
        #print(f"Token: {name}, Symbol: {symbol}, Quantity: {balance_value}, Balance (ETH): N/A, Balance (USD): N/A")
        print('done')
     
     
    usd_price = eth_price_decimal * balance_value
    price_asset_base_currency = usd_price  # Price of the asset in USD
    #price_eth_base_currency = fetch_ethereum_price()
    #print(price_asset_base_currency,price_eth_base_currency)   #
    #if price_eth_base_currency:
    #    price_eth = price_asset_base_currency / price_eth_base_currency
     #   print("Price in ETH:", price_eth)


     
     
     
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
     
service_file = r'C:\Users\jamck\new-eclipse-workplace\Python Projects\CryptoSheetQuote\cryptosheetquote-c2560d7d4554.json'
gc = pygsheets.authorize(service_file=service_file)
sheetname = 'CryptoSheetQuote'
sh = gc.open(sheetname)
wks = sh.worksheet_by_title('Sheet1')
wks.clear(start='A1', end='J')   
wks.update_value('A1', 'Wallet Address')
wks.update_value('B1', 'Ethereum Balance')
wks.update_value('C1', 'Tokens')
wks.update_value('D1', 'Symbol')
wks.update_value('E1', 'Quantity')
wks.update_value('F1', 'Price of Coin')
wks.update_value('G1', 'ETH Conversion')
wks.update_value('H1', 'Total Value (USD)')
wks.update_value('A2',  wallet_address)
wks.update_value('B2',  " ")           
y = 2  # Starting row for tokens (C2)

for balance in sorted_balances:
    name = balance['name']
    symbol = balance['symbol']
    token_price_data = cryptocompare.get_price(symbol, currency='USD')
    usd_price = eth_price_decimal * balance_value
    if token_price_data is None:
        continue
    else:
        wks.update_value(f"C{y}", name)
    
    
    y += 1
    
    
y = 2  # Starting row for tokens (C2)

for balance in sorted_balances:
    symbol = balance['symbol']
    symbol = balance['symbol']
    token_price_data = cryptocompare.get_price(symbol, currency='USD')
    usd_price = eth_price_decimal * balance_value
    if token_price_data is None:
        continue
    else:
        if len(symbol) > 5:
            symbol = ('N/A')
        wks.update_value(f"D{y}", symbol)
    y += 1
    
y = 2  # Starting row for tokens (C2)

for balance in sorted_balances:
    balance_value = Decimal(str(balance['balance'][:3]))
    symbol = balance['symbol']
    token_price_data = cryptocompare.get_price(symbol, currency='USD')
    usd_price = eth_price_decimal * balance_value
    if token_price_data is None:
        continue
    else:
        wks.update_value(f"E{y}",f"{balance_value}")
    y += 1
    
y = 2  # Starting row for tokens (C2)

for balance in sorted_balances:
    symbol = balance['symbol']
    token_price_data = cryptocompare.get_price(symbol, currency='USD')
    symbol = balance['symbol']
    token_price_data = cryptocompare.get_price(symbol, currency='USD')
    usd_price = eth_price_decimal * balance_value
    if token_price_data is None:
        continue
    else:
        if token_price_data is None:
            token_price_data = 'unable to find price'
        else:
            token_price_data = token_price_data[symbol]['USD']
        
        wks.update_value(f"F{y}", str(token_price_data))
    y += 1
   
   
   
y = 2  
for balance in sorted_balances:
    symbol = balance['symbol']
    token_price_data = cryptocompare.get_price(symbol, currency='USD')
    usd_price = eth_price_decimal * balance_value
    symbol = balance['symbol']
    token_price_data = cryptocompare.get_price(symbol, currency='USD')
    usd_price = eth_price_decimal * balance_value
    if token_price_data is None:
        continue
    else:
        if token_price_data is None:
            usd_price = 'unable to find price'
        else:
            usd_price = eth_price_decimal * balance_value
        
        wks.update_value(f"H{y}", str(usd_price))
    y += 1    
    
    
    
    
y = 2  
for balance in sorted_balances:
    symbol = balance['symbol']
    token_price_data = cryptocompare.get_price(symbol, currency='USD')
    eth_price_decimal = Decimal(str(token_price))
    symbol = balance['symbol']
    token_price_data = cryptocompare.get_price(symbol, currency='USD')
    usd_price = eth_price_decimal * balance_value
    
    
    
    
    
    if token_price_data is None:
        continue
    else:
        if token_price_data is None:
            usd_price = 'unable to find price'
        else:
            eth_price_decimal = Decimal(str(eth_price_decimal))
        
        wks.update_value(f"G{y}", str(eth_price_decimal))
    y += 1    
    
    

    
print('Google Sheet Updated!')
            
            
            
            
